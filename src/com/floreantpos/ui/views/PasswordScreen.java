/*
 * PasswordScreen.java
 *
 * Created on August 14, 2006, 11:01 PM
 */

package com.floreantpos.ui.views;

import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JPanel;

import net.miginfocom.swing.MigLayout;

import com.floreantpos.POSConstants;
import com.floreantpos.config.ui.DatabaseConfigurationDialog;
import com.floreantpos.config.ui.TerminalSetupDialog;
import com.floreantpos.main.Application;
import com.floreantpos.model.AttendenceHistory;
import com.floreantpos.model.Shift;
import com.floreantpos.model.User;
import com.floreantpos.model.dao.AttendenceHistoryDAO;
import com.floreantpos.model.dao.UserDAO;
import com.floreantpos.swing.MessageDialog;
import com.floreantpos.swing.POSPasswordField;
import com.floreantpos.swing.POSTextField;
import com.floreantpos.swing.PosButton;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.util.ShiftUtil;

/**
 * 
 * @author MShahriar
 */
public class PasswordScreen extends JPanel {

	/** Creates new form PasswordScreen */
	public PasswordScreen() {
		initComponents();

		btnConfigureDatabase.setAction(goAction);
		btnConfigureDatabase.setActionCommand("DBCONFIG");
		
		applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		buttonPanel = new javax.swing.JPanel();
		posButton4 = new com.floreantpos.swing.PosButton();
		posButton13 = new com.floreantpos.swing.PosButton();
		posButton12 = new com.floreantpos.swing.PosButton();
		posButton9 = new com.floreantpos.swing.PosButton();
		posButton10 = new com.floreantpos.swing.PosButton();
		posButton11 = new com.floreantpos.swing.PosButton();
		posButton8 = new com.floreantpos.swing.PosButton();
		posButton7 = new com.floreantpos.swing.PosButton();
		posButton6 = new com.floreantpos.swing.PosButton();
		posButton3 = new com.floreantpos.swing.PosButton();
		posButton1 = new com.floreantpos.swing.PosButton();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		tfPassword = new POSPasswordField();
		tfUserId = new POSTextField();
		jLabel4 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		btnConfigureDatabase = new com.floreantpos.swing.PosButton();
		btnLogin = new com.floreantpos.swing.PosButton();
		btnShutdown = new com.floreantpos.swing.PosButton();

		setPreferredSize(new Dimension(343, 593));
		setLayout(new MigLayout("ins 0", "[343px,grow]", "[126px][270px][grow][110px]"));

		buttonPanel.setOpaque(false);
		buttonPanel.setPreferredSize(new java.awt.Dimension(280, 180));
		buttonPanel.setLayout(new MigLayout("", "[111px][111px][111px]", "[60px][60px][60px][60px]"));

		posButton4.setAction(goAction);
		posButton4.setIcon(com.floreantpos.IconFactory.getIcon("7_32.png"));
		posButton4.setActionCommand("7");
		posButton4.setFocusable(false);
		buttonPanel.add(posButton4, "cell 0 0,grow");

		posButton13.setAction(goAction);
		posButton13.setIcon(com.floreantpos.IconFactory.getIcon("8_32.png"));
		posButton13.setActionCommand("8");
		posButton13.setFocusable(false);
		buttonPanel.add(posButton13, "cell 1 0,grow");

		posButton12.setAction(goAction);
		posButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/9_32.png"))); // NOI18N
		posButton12.setActionCommand("9");
		posButton12.setFocusable(false);
		buttonPanel.add(posButton12, "cell 2 0,grow");

		posButton9.setAction(goAction);
		posButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/4_32.png"))); // NOI18N
		posButton9.setActionCommand("4");
		posButton9.setFocusable(false);
		buttonPanel.add(posButton9, "cell 0 1,grow");

		posButton10.setAction(goAction);
		posButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/5_32.png"))); // NOI18N
		posButton10.setActionCommand("5");
		posButton10.setFocusable(false);
		buttonPanel.add(posButton10, "cell 1 1,grow");

		posButton11.setAction(goAction);
		posButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/6_32.png"))); // NOI18N
		posButton11.setActionCommand("6");
		posButton11.setFocusable(false);
		buttonPanel.add(posButton11, "cell 2 1,grow");

		posButton8.setAction(goAction);
		posButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1_32.png"))); // NOI18N
		posButton8.setActionCommand("1");
		posButton8.setFocusable(false);
		buttonPanel.add(posButton8, "cell 0 2,grow");

		posButton7.setAction(goAction);
		posButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2_32.png"))); // NOI18N
		posButton7.setActionCommand("2");
		posButton7.setFocusable(false);
		buttonPanel.add(posButton7, "cell 1 2,grow");

		posButton6.setAction(goAction);
		posButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/3_32.png"))); // NOI18N
		posButton6.setActionCommand("3");
		posButton6.setFocusable(false);
		buttonPanel.add(posButton6, "cell 2 2,grow");

		posButton3.setAction(goAction);
		posButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/0_32.png"))); // NOI18N
		posButton3.setActionCommand("0");
		posButton3.setFocusable(false);
		buttonPanel.add(posButton3, "cell 0 3,grow");

		posButton1.setAction(goAction);
		posButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear_32.png"))); // NOI18N
		posButton1.setText(com.floreantpos.POSConstants.CLEAR);
		posButton1.setFocusable(false);
		posButton1.setPreferredSize(new java.awt.Dimension(90, 50));
		buttonPanel.add(posButton1, "cell 1 3,grow");
		add(buttonPanel, "cell 0 1,grow");

		jPanel2.setOpaque(false);

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabel1.setForeground(new java.awt.Color(204, 102, 0));
		jLabel1.setText(com.floreantpos.POSConstants.ENTER_YOUR_USER_ID);

		jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
		jLabel2.setForeground(new java.awt.Color(204, 102, 0));
		jLabel2.setBackground(new java.awt.Color(204, 102, 0));
		jLabel2.setText(com.floreantpos.POSConstants.ENTER_YOUR_PASSWORD);
		tfPassword.setFont(new java.awt.Font("Courier", 1, 18));
		tfPassword.setHorizontalAlignment(POSTextField.LEFT);

		tfUserId.setFont(new java.awt.Font("Tahoma", 1, 18));

		jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 24));
		jLabel4.setForeground(new java.awt.Color(204, 102, 0));
		jLabel4.setText(com.floreantpos.POSConstants.USER_TYPE + ":");
		add(jPanel2, "cell 0 0,growx,aligny top");
		jPanel2.setLayout(new MigLayout("", "[343px]", "[22px][31px][22px][26px]"));
		jPanel2.add(jLabel1, "cell 0 0,growx,aligny top");
		jPanel2.add(jLabel2, "cell 0 2,growx,aligny top");
		jPanel2.add(tfPassword, "cell 0 3,growx,aligny top");
		jPanel2.add(tfUserId, "cell 0 1,grow");

		jPanel3.setPreferredSize(new java.awt.Dimension(100, 105));
		jPanel3.setLayout(new MigLayout("", "[157px][157px]", "[45px][45px]"));

		btnConfigureDatabase.setAction(goAction);
		btnConfigureDatabase.setText(com.floreantpos.POSConstants.CONFIGURE_DATABASE);
		btnConfigureDatabase.setFocusable(false);
		jPanel3.add(btnConfigureDatabase, "cell 0 0,grow");

		btnLogin.setAction(goAction);
		btnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log_in_32.png"))); // NOI18N
		btnLogin.setText(com.floreantpos.POSConstants.LOGIN);
		btnLogin.setFocusable(false);
		jPanel3.add(btnLogin, "cell 1 0,grow");

		psbtnTerminalSetup = new PosButton();
		psbtnTerminalSetup.setVisible(false);
		
		panel = new JPanel();
		add(panel, "cell 0 2,grow");
		psbtnTerminalSetup.setAction(goAction);
		psbtnTerminalSetup.setText(POSConstants.TERMINAL_SETUP);
		jPanel3.add(psbtnTerminalSetup, "cell 0 1,grow");

		btnShutdown.setAction(goAction);
		btnShutdown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/shut_down_32.png"))); // NOI18N
		btnShutdown.setText(com.floreantpos.POSConstants.SHUTDOWN);
		btnShutdown.setFocusable(false);
		jPanel3.add(btnShutdown, "cell 1 1,grow");

		add(jPanel3, "cell 0 3,growx,aligny bottom");
	}// </editor-fold>//GEN-END:initComponents

	public void doLogin() {
		try {

			Application application = Application.getInstance();
			application.initializeSystem();

			int userId = captureUserId();

			String newPass = capturePassword();

			UserDAO dao = new UserDAO();
			User user = dao.findUser(userId);
			if (!user.getPassword().equalsIgnoreCase(newPass)) {
				throw new RuntimeException(POSConstants.WRONG_PASSWORD);
			}

			Shift currentShift = ShiftUtil.getCurrentShift();
			if (currentShift == null) {
				throw new RuntimeException(POSConstants.NO_SHIFT_CONFIGURED);
			}

			adjustUserShift(user, currentShift);

			application.setCurrentUser(user);
			application.setCurrentShift(currentShift);

			tfUserId.setText("");
			tfPassword.setText("");
			application.getRootView().showView(SwitchboardView.VIEW_NAME);

		} catch (Exception e1) {
			String message = e1.getMessage();

			if (message != null && message.contains("Cannot open connection")) {
				MessageDialog.showError("Cannot open database connection, please check database configuration.");
				DatabaseConfigurationDialog.show(Application.getPosWindow());
			}
			else {
				MessageDialog.showError(e1.getMessage());
			}

		}
	}

	private void adjustUserShift(User user, Shift currentShift) {
		Application application = Application.getInstance();
		Calendar currentTime = Calendar.getInstance();

		if (user.isClockedIn() != null && user.isClockedIn().booleanValue()) {
			Shift userShift = user.getCurrentShift();
			Date userLastClockInTime = user.getLastClockInTime();
			long elaspedTimeSinceLastLogin = Math.abs(currentTime.getTimeInMillis() - userLastClockInTime.getTime());

			if (userShift != null) {
				if (!userShift.equals(currentShift)) {
					reClockInUser(currentTime, user, currentShift);
				}
				else if (userShift.getShiftLength() != null && (elaspedTimeSinceLastLogin >= userShift.getShiftLength())) {
					reClockInUser(currentTime, user, currentShift);
				}
			}
			else {
				user.doClockIn(application.getTerminal(), currentShift, currentTime);
			}
		}
		else {
			user.doClockIn(application.getTerminal(), currentShift, currentTime);
		}
	}

	private String capturePassword() {
		char[] password = tfPassword.getPassword();
		String newPass = new String(password);
		return newPass;
	}

	private int captureUserId() {
		try {
			return Integer.parseInt(tfUserId.getText());
		} catch (Exception x) {
			throw new RuntimeException(POSConstants.USER_ID_NOT_VALID);
		}
	}

	private void reClockInUser(Calendar currentTime, User user, Shift currentShift) {
		POSMessageDialog.showMessage("You will be clocked out from previous Shift");

		Application application = Application.getInstance();
		AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();

		AttendenceHistory attendenceHistory = attendenceHistoryDAO.findHistoryByClockedInTime(user);
		if (attendenceHistory == null) {
			attendenceHistory = new AttendenceHistory();
			Date lastClockInTime = user.getLastClockInTime();
			Calendar c = Calendar.getInstance();
			c.setTime(lastClockInTime);
			attendenceHistory.setClockInTime(lastClockInTime);
			attendenceHistory.setClockInHour(Short.valueOf((short) c.get(Calendar.HOUR)));
			attendenceHistory.setUser(user);
			attendenceHistory.setTerminal(application.getTerminal());
			attendenceHistory.setShift(user.getCurrentShift());
		}

		user.doClockOut(attendenceHistory, currentShift, currentTime);

		user.doClockIn(application.getTerminal(), currentShift, currentTime);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private com.floreantpos.swing.PosButton btnConfigureDatabase;
	private com.floreantpos.swing.PosButton btnLogin;
	private com.floreantpos.swing.PosButton btnShutdown;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private com.floreantpos.swing.PosButton posButton1;
	private com.floreantpos.swing.PosButton posButton10;
	private com.floreantpos.swing.PosButton posButton11;
	private com.floreantpos.swing.PosButton posButton12;
	private com.floreantpos.swing.PosButton posButton13;
	private com.floreantpos.swing.PosButton posButton3;
	private com.floreantpos.swing.PosButton posButton4;
	private com.floreantpos.swing.PosButton posButton6;
	private com.floreantpos.swing.PosButton posButton7;
	private com.floreantpos.swing.PosButton posButton8;
	private com.floreantpos.swing.PosButton posButton9;
	private POSPasswordField tfPassword;
	private POSTextField tfUserId;
	// End of variables declaration//GEN-END:variables

	Action goAction = new AbstractAction() {
		public void actionPerformed(ActionEvent e) {
			String command = e.getActionCommand();
			if (com.floreantpos.POSConstants.CLEAR.equals(command)) {
				if (tfUserId.hasFocus()) {
					tfUserId.setText("");
				}
				else if (tfPassword.hasFocus()) {
					tfPassword.setText("");
				}
			}
			else if (com.floreantpos.POSConstants.LOGIN.equals(command)) {
				doLogin();
			}
			else if (com.floreantpos.POSConstants.SHUTDOWN.equals(command)) {
				Application.getInstance().shutdownPOS();
			}
			else if ("DBCONFIG".equalsIgnoreCase(command)) {
				DatabaseConfigurationDialog.show(Application.getPosWindow());
			}
			else if(POSConstants.TERMINAL_SETUP.equals(command)) {
				TerminalSetupDialog dialog = new TerminalSetupDialog();
				dialog.pack();
				dialog.setLocationRelativeTo(Application.getPosWindow());
				dialog.setVisible(true);
			}
			else {
				if (tfUserId.hasFocus()) {
					tfUserId.setText(tfUserId.getText() + command);
				}
				else if (tfPassword.hasFocus()) {

					String newPass = capturePassword();
					newPass += command;
					tfPassword.setText(newPass);
				}
			}
		}
	};
	private PosButton psbtnTerminalSetup;
	private JPanel panel;

	@Override
	public void setVisible(boolean aFlag) {
		super.setVisible(aFlag);
		if (aFlag) {
			tfUserId.requestFocus();
		}
	}
}
